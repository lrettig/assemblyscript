{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__25__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","line","column","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","warning","error","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","ret","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","createI32","createI64","createF32","createF64","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","numNames","optionalStart","restIndex","cachedDefaultParameterNames","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","ReportMode","currentThisExpression","currentElementExpression","resolveType","reportMode","REPORT","resolveSignature","typeNode","Type_0_is_not_generic","resolveClassInclTypeArguments","typeArgumentNodes","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","resolveTypeArguments","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","resolveExpression","propertyName","Property_0_does_not_exist_on_type_1","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccess","elementAccess","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","resolveFunctionInclTypeArguments","functionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","isInstance","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","reportNode","resolvedTypeArguments","_e","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","_f","_g","inheritedMember","constructorPartial","_h","_j","fieldDeclaration","fieldType","baseField","Type_expected","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","overloadPrototype","operatorInstance","operatorPartial","typeParameterNodes","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","fullName","ctor","compileSourceByPath","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileGetter","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","nativeFieldType","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","readI32","readI64","lo","hi","readI8","readI16","readF32","i32_as_f32","f32_as_i32","readF64","i64_as_f64","valueI64","f64_as_i64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","funcName","allocateInstance","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","F64","Float64Array","F32","Float32Array","I32","Int32Array","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","x","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","binaryen","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","emitText","emitAsmjs"],"mappings":"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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__25__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.PARENTHESIZED: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveGlobal(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX, CommonFlags } from \"./common\";\nexport { Node, NodeKind, SourceKind } from \"./ast\";\nexport { TypeFlags, TypeKind } from \"./types\";\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__25__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n"],"sourceRoot":""}