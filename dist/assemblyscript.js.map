{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__25__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","line","column","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","warning","error","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","ret","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","createI32","createI64","createF32","createF64","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","numNames","optionalStart","restIndex","cachedDefaultParameterNames","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","ReportMode","currentThisExpression","currentElementExpression","resolveType","reportMode","REPORT","resolveSignature","typeNode","Type_0_is_not_generic","resolveClassInclTypeArguments","typeArgumentNodes","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","resolveTypeArguments","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","resolveExpression","propertyName","Property_0_does_not_exist_on_type_1","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccess","elementAccess","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","resolveFunctionInclTypeArguments","functionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","isInstance","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","reportNode","resolvedTypeArguments","_e","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","_f","_g","inheritedMember","constructorPartial","_h","_j","fieldDeclaration","fieldType","baseField","Type_expected","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","overloadPrototype","operatorInstance","operatorPartial","typeParameterNodes","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","fullName","ctor","compileSourceByPath","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","nativeFieldType","parentElement","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","readI32","readI64","lo","hi","readI8","readI16","readF32","i32_as_f32","f32_as_i32","readF64","i64_as_f64","valueI64","f64_as_i64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","allocateInstance","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","F64","Float64Array","F32","Float32Array","I32","Int32Array","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","x","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","binaryen","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","emitText","emitAsmjs"],"mappings":"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M,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__25__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: FunctionRef[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      module.setFunctionTable(functionTable);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.ref);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX, CommonFlags } from \"./common\";\nexport { Node, NodeKind, SourceKind } from \"./ast\";\nexport { TypeFlags, TypeKind } from \"./types\";\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(0);\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  functionTable[gcHookIndex] = module.addFunction(\n    classInstance.internalName + \"~gc\",\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  return gcHookIndex;\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__25__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n"],"sourceRoot":""}