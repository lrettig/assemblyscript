{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__25__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","common_1","tokenizer_1","Token","Range","NodeKind","util_1","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","range","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","text","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","length","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizedPath","normalizePath","startsWith","resolvePath","source","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","assert","charCodeAt","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","substring","Array","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","DiagnosticCategory","diagnosticMessages_generated_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","line","column","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","warning","error","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","instance","resolveClass","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","ret","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","createI32","createI64","createF32","createF64","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","numNames","optionalStart","restIndex","cachedDefaultParameterNames","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","reportMode","REPORT","resolveSignature","typeNode","Type_0_is_not_generic","resolveClassInclTypeArguments","typeArgumentNodes","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","DEFAULT","REST","returnTypeNode","resolveTypeArguments","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","resolveExpression","propertyName","Property_0_does_not_exist_on_type_1","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccess","elementAccess","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","resolveFunctionInclTypeArguments","functionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","isInstance","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","reportNode","resolvedTypeArguments","_e","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","_f","_g","inheritedMember","constructorPartial","_h","_j","fieldDeclaration","fieldType","baseField","PRIVATE","Type_expected","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","overloadPrototype","operatorInstance","operatorPartial","typeParameterNodes","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","fullName","ctor","compileSourceByPath","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","stringOffset","needsGCHeader","stringLength","stringSize","stringBuffer","stringType","ensureStaticArray","elementType","byteLength","usizeTypeSize","arrayHeaderSize","arrayTotalSize","bufferTotalSize","clz","needsGC","writeI64","writeI32","writeI8","writeI16","writeF32","writeF64","arrayInstance","address","isConst","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","field","nativeFieldType","parentElement","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","readI32","readI64","lo","hi","readI8","readI16","readF32","i32_as_f32","f32_as_i32","readF64","i64_as_f64","valueI64","f64_as_i64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","messageArg","filenameArg","ensureGCHook","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","allocateInstance","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","F64","Float64Array","F32","Float32Array","I32","Int32Array","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","x","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","binaryen","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","emitText","emitAsmjs"],"mappings":"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AM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__25__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              currentExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      this.gcHeaderSize = (2 * options.usizeType.byteSize + 4 + 7) & ~7; // TODO: hardcoded atm\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: FunctionRef[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      module.setFunctionTable(functionTable);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.ref);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Field>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n      case ElementKind.PROPERTY: // TODO\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var options = this.options;\n    var stringSegments = this.stringSegments;\n    var needsGCHeader = program.hasGC;\n\n    var stringSegment: MemorySegment;\n    var stringOffset: I64;\n    if (!stringSegments.has(stringValue)) {\n      let stringLength = stringValue.length;\n      let stringSize = 4 + stringLength * 2;\n      let offset = 0;\n      let gcHeaderSize = program.gcHeaderSize;\n      if (needsGCHeader) {\n        stringSize += gcHeaderSize;\n        offset += gcHeaderSize;\n      }\n      let stringBuffer = new Uint8Array(stringSize);\n      stringBuffer[offset    ] =  stringLength         & 0xff;\n      stringBuffer[offset + 1] = (stringLength >>>  8) & 0xff;\n      stringBuffer[offset + 2] = (stringLength >>> 16) & 0xff;\n      stringBuffer[offset + 3] = (stringLength >>> 24) & 0xff;\n      for (let i = 0; i < stringLength; ++i) {\n        stringBuffer[offset + 4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\n        stringBuffer[offset + 5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\n      }\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\n      stringSegments.set(stringValue, stringSegment);\n      if (needsGCHeader) {\n        stringOffset = i64_add(stringSegment.offset, i64_new(gcHeaderSize, 0));\n      } else {\n        stringOffset = stringSegment.offset;\n      }\n    } else {\n      stringSegment = <MemorySegment>stringSegments.get(stringValue);\n      stringOffset = stringSegment.offset;\n    }\n    if (program.typesLookup.has(\"string\")) {\n      let stringType = <Type>program.typesLookup.get(\"string\");\n      this.currentType = stringType;\n    } else {\n      this.currentType = options.usizeType;\n    }\n    if (options.isWasm64) {\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_i32(stringOffset));\n      return module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    // determine the size of the Array header\n    var arrayHeaderSize = (usizeTypeSize + 4 + 7) & ~7; // .buffer_ + .length_ + alignment\n    var arrayTotalSize = arrayHeaderSize;\n\n    // determine the size of the ArrayBuffer\n    var bufferHeaderSize = (4 + 7) & ~7; // .byteLength + alignment\n    var bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\n\n    var program = this.program;\n    var needsGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var offset = 0;\n    if (needsGC) {\n      offset += gcHeaderSize; // start writing after GC header\n      arrayTotalSize += gcHeaderSize;\n      bufferTotalSize += gcHeaderSize;\n    }\n\n    // create a compound segment holding both the the Array header and the ArrayBuffer\n    var buffer = new Uint8Array(arrayHeaderSize + bufferTotalSize);\n    var segment = this.addMemorySegment(buffer);\n\n    // write the Array header first\n    if (usizeTypeSize == 8) {\n      writeI64(i64_add(segment.offset, i64_new(arrayHeaderSize)), buffer, offset); // .buffer_\n      offset += 8;\n    } else {\n      assert(i64_is_u32(segment.offset));\n      writeI32(i64_low(segment.offset) + arrayHeaderSize, buffer,  offset); // .buffer_\n      offset += 4;\n    }\n    writeI32(length, buffer, offset); // .length_\n    offset += 4;\n    assert(((offset + 7) & ~7) == arrayTotalSize); // incl. GC header if applicable\n\n    // append the ArrayBuffer\n    offset = arrayTotalSize;\n    if (needsGC) offset += gcHeaderSize;\n    writeI32(byteLength, buffer, offset); // .byteLength\n    offset += bufferHeaderSize; // align\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buffer, offset);\n              offset += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buffer, offset);\n              offset += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buffer, offset);\n              offset += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buffer, offset);\n          offset += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buffer, offset);\n          offset += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buffer, offset);\n          offset += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(offset <= arrayTotalSize + bufferTotalSize); // might have empty trailing space\n\n    var arrayPrototype = this.program.arrayPrototype;\n    if (arrayPrototype) {\n      let arrayInstance = this.resolver.resolveClass(arrayPrototype, [ elementType ], null, ReportMode.REPORT);\n      if (!arrayInstance) {\n        this.currentType = this.options.usizeType;\n        return this.module.createUnreachable();\n      }\n      this.currentType = arrayInstance.type;\n    } else {\n      this.currentType = this.options.usizeType;\n    }\n\n    // return a pointer at the array header (skip GC header if present)\n    var address = segment.offset;\n    if (needsGC) address = i64_add(address, i64_new(gcHeaderSize, 0));\n    if (usizeTypeSize == 8) {\n      return this.module.createI64(i64_low(address), i64_high(address));\n    } else {\n      assert(i64_is_u32(address));\n      return this.module.createI32(i64_low(address));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      values[i] = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      if (isStatic) {\n        let expr = module.precomputeExpression(values[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, values);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        values[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: { // instance property (here: getter)\n        let prototype = (<Property>target).getterPrototype;\n        if (prototype) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.createUnreachable();\n          let signature = instance.signature;\n          if (!this.checkCallSignature( // reports\n            signature,\n            0,\n            instance.is(CommonFlags.INSTANCE),\n            propertyAccess\n          )) {\n            return module.createUnreachable();\n          }\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let parent = assert(instance.parent);\n            assert(parent.kind == ElementKind.CLASS);\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\n          } else {\n            this.currentType = signature.returnType;\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX, CommonFlags } from \"./common\";\nexport { Node, NodeKind, SourceKind } from \"./ast\";\nexport { TypeFlags, TypeKind } from \"./types\";\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(0);\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  functionTable[gcHookIndex] = module.addFunction(\n    classInstance.internalName + \"~gc\",\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  return gcHookIndex;\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__25__;","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n"],"sourceRoot":""}